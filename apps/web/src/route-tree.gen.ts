/** biome-ignore-all lint/style/useNamingConvention: safe */

/** biome-ignore-all lint/suspicious/noExplicitAny: safe  */

// @ts-nocheck

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./app/__root";
import { Route as CreateRouteImport } from "./app/create";
import { Route as DashboardGoalsRouteImport } from "./app/dashboard/goals";
import { Route as DashboardRouteRouteImport } from "./app/dashboard/route";
import { Route as DashboardSavingsRouteImport } from "./app/dashboard/savings";
import { Route as DashboardSendRouteImport } from "./app/dashboard/send";
import { Route as DashboardSettingsRouteImport } from "./app/dashboard/settings";
import { Route as IndexRouteImport } from "./app/index";
import { Route as WcRouteImport } from "./app/wc";

const WcRoute = WcRouteImport.update({
  getParentRoute: () => rootRouteImport,
  id: "/wc",
  path: "/wc",
} as any);
const CreateRoute = CreateRouteImport.update({
  getParentRoute: () => rootRouteImport,
  id: "/create",
  path: "/create",
} as any);
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  getParentRoute: () => rootRouteImport,
  id: "/dashboard",
  path: "/dashboard",
} as any);
const IndexRoute = IndexRouteImport.update({
  getParentRoute: () => rootRouteImport,
  id: "/",
  path: "/",
} as any);
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  getParentRoute: () => DashboardRouteRoute,
  id: "/settings",
  path: "/settings",
} as any);
const DashboardSendRoute = DashboardSendRouteImport.update({
  getParentRoute: () => DashboardRouteRoute,
  id: "/send",
  path: "/send",
} as any);
const DashboardSavingsRoute = DashboardSavingsRouteImport.update({
  getParentRoute: () => DashboardRouteRoute,
  id: "/savings",
  path: "/savings",
} as any);
const DashboardGoalsRoute = DashboardGoalsRouteImport.update({
  getParentRoute: () => DashboardRouteRoute,
  id: "/goals",
  path: "/goals",
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/create": typeof CreateRoute;
  "/wc": typeof WcRoute;
  "/dashboard/goals": typeof DashboardGoalsRoute;
  "/dashboard/savings": typeof DashboardSavingsRoute;
  "/dashboard/send": typeof DashboardSendRoute;
  "/dashboard/settings": typeof DashboardSettingsRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/create": typeof CreateRoute;
  "/wc": typeof WcRoute;
  "/dashboard/goals": typeof DashboardGoalsRoute;
  "/dashboard/savings": typeof DashboardSavingsRoute;
  "/dashboard/send": typeof DashboardSendRoute;
  "/dashboard/settings": typeof DashboardSettingsRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/create": typeof CreateRoute;
  "/wc": typeof WcRoute;
  "/dashboard/goals": typeof DashboardGoalsRoute;
  "/dashboard/savings": typeof DashboardSavingsRoute;
  "/dashboard/send": typeof DashboardSendRoute;
  "/dashboard/settings": typeof DashboardSettingsRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/dashboard"
    | "/create"
    | "/wc"
    | "/dashboard/goals"
    | "/dashboard/savings"
    | "/dashboard/send"
    | "/dashboard/settings";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/dashboard"
    | "/create"
    | "/wc"
    | "/dashboard/goals"
    | "/dashboard/savings"
    | "/dashboard/send"
    | "/dashboard/settings";
  id:
    | "__root__"
    | "/"
    | "/dashboard"
    | "/create"
    | "/wc"
    | "/dashboard/goals"
    | "/dashboard/savings"
    | "/dashboard/send"
    | "/dashboard/settings";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
  CreateRoute: typeof CreateRoute;
  WcRoute: typeof WcRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/wc": {
      id: "/wc";
      path: "/wc";
      fullPath: "/wc";
      preLoaderRoute: typeof WcRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/create": {
      id: "/create";
      path: "/create";
      fullPath: "/create";
      preLoaderRoute: typeof CreateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard/settings": {
      id: "/dashboard/settings";
      path: "/settings";
      fullPath: "/dashboard/settings";
      preLoaderRoute: typeof DashboardSettingsRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/dashboard/send": {
      id: "/dashboard/send";
      path: "/send";
      fullPath: "/dashboard/send";
      preLoaderRoute: typeof DashboardSendRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/dashboard/savings": {
      id: "/dashboard/savings";
      path: "/savings";
      fullPath: "/dashboard/savings";
      preLoaderRoute: typeof DashboardSavingsRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/dashboard/goals": {
      id: "/dashboard/goals";
      path: "/goals";
      fullPath: "/dashboard/goals";
      preLoaderRoute: typeof DashboardGoalsRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
  }
}

interface DashboardRouteRouteChildren {
  DashboardGoalsRoute: typeof DashboardGoalsRoute;
  DashboardSavingsRoute: typeof DashboardSavingsRoute;
  DashboardSendRoute: typeof DashboardSendRoute;
  DashboardSettingsRoute: typeof DashboardSettingsRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardGoalsRoute: DashboardGoalsRoute,
  DashboardSavingsRoute: DashboardSavingsRoute,
  DashboardSendRoute: DashboardSendRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  CreateRoute: CreateRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  IndexRoute: IndexRoute,
  WcRoute: WcRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
